#!/usr/bin/env python

import os
import re
import sys
import filecmp
import difflib
from pydiff import HtmlDiff as HDiff
import optparse
import subprocess
from filecmp import dircmp

#s1 =
#"http://istsvn.corp.apple.com:1080/SVNROOT/EDW/branches/Common_Framework/CORE-ETL/PythonUtilities/ELTTestFabric/Utils/EnvManager.py@62776"
#s2 =
#"http://istsvn.corp.apple.com:1080/SVNROOT/EDW/branches/Common_Framework/CORE-ETL/PythonUtilities/ELTTestFabric/Utils/EnvManager.py@61496" 

def main():
    usage = "code_review -b <svn_branch_name>"
    parser = optparse.OptionParser(usage, version = __file__ + "1.0")
    parser.add_option('-b', action="store", help="SVN Branch URL")

    options,args = parser.parse_args()

    if (len(args) == 0):
        #parser.print_help()
        pass

    if (options.b is not None):
        svn_url = options.b
        print "SVN URL =>", svn_url


    get_svn_info()        


def get_svn_info():
    svn_url = os.popen("svn info | grep \"URL\" | sed \'s/URL: //\'")
    svn_url = svn_url.readline().strip()
    #print "SVN URL => ", svn_url


    #rev_hist_cmd = "svn log -q " + svn_url + " | cut -f1 -d \"|\" | cut -f1 -d \"-\" | tr \'\\n\' \':\'  | cut -f2,4 -d \":\" | tr -d \"r\" | tr -d \" \" "
    #rev_hist_cmd = "svn log -q . | cut -f1 -d \"|\" | cut -f1 -d \"-\" | tr \'\\n\' \':\'  | cut -f2,4 -d \":\" | tr -d \"r\" | tr -d \" \" "
    rev_hist_cmd = "svn log -q . | cut -f1,3 -d \"|\" | cut -f1,3 -d \" \" | tr -d \"-\" | tr \" \" \":\" "
    rev_hist = os.popen(rev_hist_cmd)
    get = rev_hist.readlines()

    last_changed = ""
    last_rev = ""
    prev_rev = ""
    rev = None
    change = None


    for i,v in enumerate(get):
        if (len(v) > 1):

            if ( i == 1 ):
                #last_changed = v[7:]
                last_rev,last_changed = re.split(":", v)
                last_rev = re.sub("[\n]+", "", last_rev.strip() )
                last_changed = re.sub("[\n]+", "", last_changed.strip() )
            else: 
                rev,change = re.split(":", v)          
                rev = re.sub("[\n]+", "", rev.strip())
                change = re.sub("[\n]+", "", change.strip() )

            if (rev is not None):
                break
            """
            if ( (change != last_changed) and ( len(change) > 0) ):
                prev_rev = rev
                break
            """
    #print "Lasr Rev =>", last_rev
    #print "Last CHanged =>", last_changed 
    #print "Prev Rev =>", prev_rev

    prev_rev = rev
    rev_hist = last_rev + ":" + prev_rev
    rev_hist = re.sub("[r]+", "", rev_hist)
    #os.system("clear")
    print "Comparing Revisions", rev_hist
            
    #sys.exit(1)

    list_files_cmd = "svn diff -r " + rev_hist + " --summarize " + svn_url + " | grep \"M\" | cut -d \" \" -f 8"
    #print list_files_cmd
    diff_files = os.popen(list_files_cmd)
    print "List of Modified files"

    #for line in diff_files.readline():  FAILS AND PRINTS EACH CHAR IN NEW LINE
    #BELOW IS GOOD AND WORKS WELL, READ DIRECTLY FROM FILE OBJ
    """
    for line in diff_files:
        print line

    """

    for line in diff_files.readlines():
        print line
        line = re.sub("[\n]+", "", line)
        dir, s_file = os.path.split(line)
        s_file, ext = os.path.splitext(s_file)
        s_file = s_file + ".html"
        print "Generating Code Review File =>", s_file
        review_file = open(s_file, "w")
        #print "SS =>", s_file
        #sys.exit(1)

        diff_curr = "svn cat " + line + "@" + last_rev + " > jt_tmp_f1"
        diff_prev = "svn cat " + line + "@" + prev_rev + " > jt_tmp_f2"

        os.system(diff_curr)
        os.system(diff_prev)
        #print diff_curr, "\n", diff_prev

        f1 = open("jt_tmp_f1", "r")
        f2 = open("jt_tmp_f2", "r")

        line1 = f1.readlines()
        line2 = f2.readlines()

        diff = HDiff().make_file(line2, line1)
        review_file.writelines(diff)

        #sys.exit(1)
    os.remove("jt_tmp_f1")
    os.remove("jt_tmp_f2")
     
if __name__ == '__main__':
    main()
